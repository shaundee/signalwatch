export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextRequest } from "next/server";
import { createClient } from "@supabase/supabase-js";
import React from "react";
import { pdf as renderPDF, Document, Page, Text, View, StyleSheet } from "@react-pdf/renderer";
import { Image } from "@react-pdf/renderer";

const styles = StyleSheet.create({
  header: { flexDirection: "row", alignItems: "center", justifyContent: "space-between", marginBottom: 10 },
  brand: { fontSize: 12, color: "#444" },
  logo: { width: 64, height: 16, objectFit: "contain" },

  page: { padding: 24, fontSize: 11, fontFamily: "Helvetica" },
  h1: { fontSize: 18, marginBottom: 6 },
  meta: { color: "#666", marginBottom: 12 },
  row: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 8,
    borderWidth: 1,            // <- no 'border:' shorthand
    borderStyle: "solid",
    borderColor: "#ddd",
    borderRadius: 6,
    marginBottom: 6,
  },
  badge: { paddingHorizontal: 6, paddingVertical: 2, borderRadius: 4 },
  
});

export async function GET(req: NextRequest) {
  const urlObj = new URL(req.url);
const wl = urlObj.searchParams.get("wl");        // e.g. "Acme Agency"
const logo = urlObj.searchParams.get("logo");    // public PNG/SVG URL

  const scanId = new URL(req.url).searchParams.get("scanId");
  if (!scanId) return new Response("scanId required", { status: 400 });

  const supa = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.SUPABASE_SERVICE_ROLE!
  );

  const { data: scan } = await supa
    .from("scans")
    .select("id,domain_id,started_at,finished_at")
    .eq("id", scanId)
    .single();
  if (!scan) return new Response("Not found", { status: 404 });

  const { data: domain } = await supa
    .from("domains")
    .select("url")
    .eq("id", scan.domain_id)
    .single();
  if (!domain) return new Response("Domain not found", { status: 404 });

  const { data: checks } = await supa
    .from("scan_checks")
    .select("name,status,details")
    .eq("scan_id", scanId)
    .order("name");

  const doc = (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.h1}>SignalWatch Audit</Text>
        <Text style={styles.meta}>
          {domain.url} • {scan.started_at ? new Date(scan.started_at).toLocaleString() : "queued"}
          {scan.finished_at ? ` → ${new Date(scan.finished_at).toLocaleTimeString()}` : ""}
        </Text>

        <View>
          {(checks || []).map((c: any) => {
            const color = c.status === "green" ? "#B7E4C7" : c.status === "amber" ? "#FFE69A" : "#FFADAD";
            return (
              <View key={c.name} style={styles.row}>
                <Text>{c.name}</Text>
                <View style={[styles.badge, { backgroundColor: color }]}>
                  <Text>{c.status}</Text>
                </View>

<View style={{ marginLeft: 8, marginRight: 8, marginBottom: 6 }}>
  {c.details?.why ? <Text>Why: {c.details.why}</Text> : null}
  {c.details?.fix ? <Text>Fix: {c.details.fix}</Text> : null}
</View>

              </View>
            );
          })}
        </View>
<View style={styles.header}>
  <Text style={styles.brand}>{wl ? `Report for ${wl}` : "SignalWatch Report"}</Text>
  {logo ? <Image style={styles.logo} src={logo} /> : null}
</View>
        <Text style={{ marginTop: 12, color: "#666" }}>Generated by SignalWatch</Text>
      </Page>
    </Document>
  );

  const pdfBuffer = await renderPDF(doc).toBuffer(); // Buffer, not stream
  return new Response(pdfBuffer as any, {
    headers: {
      "content-type": "application/pdf",
      "content-disposition": `inline; filename="signalwatch-${scanId}.pdf"`,
    },
  });
}
